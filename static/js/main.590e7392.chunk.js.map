{"version":3,"sources":["lock.js","App.js","serviceWorker.js","index.js"],"names":["ORIGINAL_RADIUS","MEDIUM_TURN_SPEED","requestAnimFrame","window","requestAnimationFrame","ImageRotation","totalAngle","number","angleTurned","lock","canvas","numbersOnDial","onResetComplete","onAnimationComplete","context","getContext","X_OFFSET","width","Y_OFFSET","height","translate","imageRotations","speed","currentAngle","radius","mode","shouldOpen","shackleIsOpen","numTicks","dialNumbersToRadians","dialNumbers","Math","PI","clearCanvas","save","clearRect","restore","drawDial","beginPath","fontSize","startAngle","endAngle","lineWidth","strokeStyle","arc","fillStyle","fill","stroke","angle","x","cos","y","sin","moveTo","lineTo","round","font","rotate","fillText","knobOuterCircleRadius","knobInnerCircleRadius","drawShackle","dialRadius","outsideX","insideX","bottomCurveY","bottomLeftY","bottomNotchY","notchX","drawLockBody","rotateImage","length","angleLeftToTurn","abs","angleToTurnNow","drawLock","shift","setTimeout","openShackle","distanceOpened","openLock","number1","number2","number3","stepByStep","push","nextStep","reset","returnToOriginalSize","setSpeed","newSpeed","setNumbersOnDial","INPUT_WIDTH","lockHelperMachine","Machine","id","initial","step","animating","states","start","on","UNLOCK","target","actions","assign","STEP_BY_STEP","unlocking","RESET","resetting","DONE","stepping","active","idle","NEXT_STEP","event","App","React","useState","firstNumber","setFirstNumber","secondNumber","setSecondNumber","thirdNumber","setThirdNumber","useMachine","currentState","send","canvasRef","useRef","lockRef","useEffect","current","numberIsValid","num","combinationIsValid","disableControls","matches","onUnlock","onStepByStep","onNextStep","onReset","flexDirection","alignItems","as","color","fontFamily","p","ref","style","marginBottom","onSubmit","e","preventDefault","border","required","name","aria-label","type","min","max","value","onClick","select","onChange","undefined","Number","disabled","backgroundColor","mx","buttons","justify","variant","justifyContent","getButtons","sx","padding","htmlFor","defaultValue","Boolean","location","hostname","match","theme","preset","secondaryOutline","bg","boxShadow","colors","secondary","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAAMA,EAAkB,IAClBC,EAAoB,GAEpBC,EAAmBC,OAAOC,sBAKhC,SAASC,EAAcC,EAAYC,GACjC,MAAO,CACLD,aACAC,SACAC,YAAa,GAIV,SAASC,EAAKC,EAAQC,EAAeC,EAAiBC,GAC3D,IAAMC,EAAUJ,EAAOK,WAAW,MAE5BC,EAAWN,EAAOO,MAAQ,EAC1BC,EAA2B,IAAhBR,EAAOS,OAExBL,EAAQM,UAAUJ,EAAUE,GAE5B,IAMIG,EANAC,EAAQrB,EACRsB,EAAe,EACfC,EAASxB,EACTyB,EAAO,SACPC,GAAa,EACbC,GAAgB,EAEhBC,EAAWjB,EAGf,SAASkB,EAAqBC,GAC5B,OAAsB,EAAdA,EAAkBC,KAAKC,GAAMJ,EAYvC,SAASK,IAEPnB,EAAQoB,OAERpB,EAAQM,WAAWJ,GAAWE,GAC9BJ,EAAQqB,UAAU,EAAG,EAAGzB,EAAOO,MAAOP,EAAOS,QAC7CL,EAAQsB,UAGV,SAASC,EAASb,GAChBV,EAAQwB,YAER,IA6DIC,EA7DEC,GAAcT,KAAKC,GAAK,EACxBS,EAAW,IAAMV,KAAKC,GAG5BlB,EAAQ4B,UAAqB,IAATlB,EACpBV,EAAQ6B,YAAc,QAGtB7B,EAAQwB,YACRxB,EAAQ8B,IAAI,EAAG,EAAGpB,EAAQgB,EAAYC,GAPb,GAQzB3B,EAAQ+B,UAAY,QACpB/B,EAAQgC,OACRhC,EAAQiC,SAGRjC,EAAQwB,YACRxB,EAAQ6B,YAAc,QAEtB,IACE,IAAIK,EAAQR,EACZQ,EAAQP,EACRO,GAAU,EAAIjB,KAAKC,GAAMJ,EACzB,CAEA,IAAIqB,EAAIzB,EAASO,KAAKmB,IAAIF,GACtBG,EAAI3B,EAASO,KAAKqB,IAAIJ,GAC1BlC,EAAQuC,OAAOJ,EAAGE,GAGlBF,EAAa,GAATzB,EAAeO,KAAKmB,IAAIF,GAC5BG,EAAa,GAAT3B,EAAeO,KAAKqB,IAAIJ,GAC5BlC,EAAQwC,OAAOL,EAAGE,GAGpBrC,EAAQiC,SAGRjC,EAAQwB,YACRxB,EAAQ4B,UAAqB,IAATlB,EAEpB,IACE,IAAIwB,EAAQR,EACZQ,EAAQP,EACRO,GAAW,EAAIjB,KAAKC,GAAMJ,EAAY,EACtC,CAEA,IAAIqB,EAAIzB,EAASO,KAAKmB,IAAIF,GACtBG,EAAI3B,EAASO,KAAKqB,IAAIJ,GAC1BlC,EAAQuC,OAAOJ,EAAGE,GAGlBF,EAAa,GAATzB,EAAeO,KAAKmB,IAAIF,GAC5BG,EAAa,GAAT3B,EAAeO,KAAKqB,IAAIJ,GAC5BlC,EAAQwC,OAAOL,EAAGE,GAGpBrC,EAAQiC,SAGRjC,EAAQwB,YAINC,EADEX,EAAW,GACFG,KAAKwB,MAAe,GAAT/B,IAAiBI,EAAW,IAEvCG,KAAKwB,MAAe,GAAT/B,GAGxBV,EAAQ+B,UAAY,QACpB/B,EAAQ0C,KAAYjB,EAAW,WAE/B,IAAK,IAAIhC,EAAS,EAAGA,EAASqB,EAAUrB,GAAU,EAChDO,EAAQoB,OACRpB,EAAQ2C,OAAS,EAAI1B,KAAKC,GAAMJ,EAAYrB,GACxCqB,EAAW,GACTrB,EAAS,GACXO,EAAQ4C,SACN,GAAKnD,GACJiB,EAASe,EAAW,OACpBf,GAAU,GAAwB,MAAjBI,EAAW,MAG/Bd,EAAQ4C,SACN,GAAKnD,GACJiB,EAASe,EAAW,MACpBf,GAAU,GAAwB,MAAjBI,EAAW,MAG7BrB,EAAS,GACXO,EAAQ4C,SAAS,GAAKnD,EAAkB,KAATiB,EAAyB,KAATA,GAC5CV,EAAQ4C,SAAS,GAAKnD,EAAkB,KAATiB,EAAyB,KAATA,GAGtDV,EAAQsB,UAIV,IAAIuB,EAAiC,GAATnC,EACxBoC,EAAiC,IAATpC,EAE5BV,EAAQ4B,UAAqB,IAATlB,EACpBV,EAAQwB,YACRxB,EAAQ6B,YAAc,UACtB7B,EAAQ8B,IACN,EACA,EACAe,EACAnB,EACAC,GA1GuB,GA8GzB,IAAK,IAAIO,EAAQR,EAAYQ,EAAQP,EAAUO,GAASjB,KAAKC,GAAK,GAAI,CAEpE,IAAIiB,EAAIU,EAAwB5B,KAAKmB,IAAIF,GACrCG,EAAIQ,EAAwB5B,KAAKqB,IAAIJ,GACzClC,EAAQuC,OAAOJ,EAAGE,GAGlBF,EAAIW,EAAwB7B,KAAKmB,IAAIF,GACrCG,EAAIS,EAAwB7B,KAAKqB,IAAIJ,GACrClC,EAAQwC,OAAOL,EAAGE,GAGpBrC,EAAQ8B,IACN,EACA,EACAgB,EACApB,EACAC,GA/HuB,GAkIzB3B,EAAQiC,SAIV,SAASc,EAAYC,GACnB,IAAMC,EAAwB,GAAbD,EAEXE,EAAUD,EAAwB,GAAbD,EAErBG,EAHU,EAEoB,IAAbH,EACKA,EACtBI,EAAcD,EAAeH,EAC7BK,EAAeD,EAA2B,GAAbJ,EAC7BM,IAAWL,EAAwB,GAAbD,GAI5BhD,EAAQwB,YACRxB,EAAQ4B,UAAyB,IAAboB,EACpBhD,EAAQ6B,YAAc,QAEtB7B,EAAQuC,OAAOU,EAdC,GAehBjD,EAAQwC,OAAOS,EAAUE,GACzBnD,EAAQ8B,IAAI,EAAGqB,EAAcF,EAAU,EAAGhC,KAAKC,IARtB,GASzBlB,EAAQwC,QAAQS,EAAUG,GAC1BpD,EAAQwC,QAAQU,EAASE,GACzBpD,EAAQwC,QAAQU,EAASG,GACzBrD,EAAQwC,OAAOc,EAAQD,GACvBrD,EAAQ8B,KACLoB,EACDG,EACa,IAAbL,EACA/B,KAAKC,GACJ,EAAID,KAAKC,GAAM,GAChB,GAEFlB,EAAQwC,QAAQU,EAASC,GACzBnD,EAAQ8B,IAAI,EAAGqB,EAAcD,EAASjC,KAAKC,GAAI,GAAG,GAClDlB,EAAQwC,OAAOU,EA/BC,GAgChBlD,EAAQwC,OAAOS,EAhCC,GAiChBjD,EAAQ+B,UAAY,UACpB/B,EAAQgC,OAERhC,EAAQiC,SAIV,SAASsB,EAAaP,GACpB,IAAMtB,GAAe,EAAIT,KAAKC,GAAM,EAC9BS,EAAY,EAAIV,KAAKC,GAAM,EAGjClB,EAAQwB,YACRxB,EAAQ8B,IACN,EACc,IAAbkB,EACY,IAAbA,EACAtB,EACAC,GARuB,GAWzB3B,EAAQ4B,UAAyB,IAAboB,EACpBhD,EAAQ6B,YAAc,QACtB7B,EAAQ+B,UAAY,UACpB/B,EAAQgC,OACRhC,EAAQiC,SAGRjC,EAAQwB,YACRxB,EAAQ4B,UAAyB,IAAboB,EACpBhD,EAAQ6B,YAAc,UACtB7B,EAAQuC,OAAO,GAAIS,GACnBhD,EAAQwC,OAAqB,IAAbQ,EAAgC,MAAbA,GACnChD,EAAQwC,OAAoB,GAAbQ,EAAgC,MAAbA,GAClChD,EAAQwC,OAAO,GAAIQ,GACnBhD,EAAQ+B,UAAY,UACpB/B,EAAQgC,OACRhC,EAAQiC,SAsDV,SAASuB,IAEP,GAA8B,IAA1BjD,EAAekD,OAAnB,CAKA,IAAIC,EACFzC,KAAK0C,IAAIpD,EAAe,GAAGf,YAAce,EAAe,GAAGb,YAIzDyC,EADF5B,EAAe,GAAGb,YAAcuB,KAAK0C,IAAIpD,EAAe,GAAGf,YAC9ByB,KAAKC,GAChC0C,EACApD,EAAQrB,GACP8B,KAAKqB,IAAIH,EAAIlB,KAAKC,GAAK,IAAM,IAC9BX,EAAe,GAAGf,WACpB,GAEEkE,EAAkB,GAIhBA,EAAkBzC,KAAK0C,IAAIpD,EAAe,GAAGf,YAAc,IACzDe,EAAe,GAAGf,WAAa,GACjCiB,GAAgBiD,EAChBnD,EAAe,GAAGb,aAAegE,IAEjCjD,GAAgBiD,EAChBnD,EAAe,GAAGb,aAAegE,IAInCjD,GAAgBmD,EAChBrD,EAAe,GAAGb,aAAeuB,KAAK0C,IAAIC,IAG5CzC,IACA0C,IAGAzE,GAAiB,WACfoE,QAIEjD,EAAekD,OAAS,EAEb,WAAT9C,GAEFJ,EAAeuD,QAGfC,YAAW,WACT3E,GAAiB,WACfoE,SAEA,IAAOrE,EAAqBqB,IACvBD,EAAe,GAAGd,SAAWc,EAAe,GAAGd,QAGxDc,EAAeuD,QAGfC,YAAW,WACT3E,GAAiB,WACfoE,SAEA,IAAOrE,EAAqBqB,KAIhCD,EAAeuD,QACf/D,KAEgB,UAATY,GAETb,IACAa,EAAO,WAGPJ,EAAiB,GACbK,IAAeC,KAUzB,SAASmD,EAAYC,GAEfvD,EAA2B,IAAlBxB,GAA0B0B,GACrCO,IAGAT,GAAU,IAAOxB,EAEjB2E,IAGAzE,GAAiB,WACf4E,EAAYC,OAELA,EAA0B,GAATvD,GAAgBE,GAC1CO,IAGAnB,EAAQoB,OACRpB,EAAQM,UAAU,GAAI2D,GACtBlB,EAAYrC,GACZV,EAAQsB,UAER2C,GAA2B,IAATvD,EAElB6C,EAAa7C,GAGbV,EAAQoB,OACRpB,EAAQ2C,OAAOlC,GACfc,EAASb,GACTV,EAAQsB,UAGRlC,GAAiB,WACf4E,EAAYC,OAGdlE,IA9CIiE,CAAY,GACZnD,GAAgB,KAsFxB,SAASgD,IACPd,EAAYrC,GACZ6C,EAAa7C,GAEbV,EAAQoB,OACRpB,EAAQ2C,OAAOlC,GAEfc,EAASb,GAETV,EAAQsB,UAGV,MAAO,CACLuC,WACAK,SAzOF,SAAkBC,EAASC,EAASC,EAASvD,EAAUwD,GACjDA,IACF3D,EAAO,eAGTJ,EAAiB,IAEFgE,KAAKhF,EAAcwB,EAAqBD,GAAW,IAClEP,EAAegE,KAAKhF,EAAcwB,EAAqBD,GAAW,IAClEP,EAAegE,KACbhF,EAAcwB,EAAqBD,EAAWqD,GAAU,IAI1D5D,EAAegE,KAAKhF,EAAcwB,GAAsBD,GAAW,IAC/DsD,EAAUD,EACZ5D,EAAegE,KACbhF,EAAcwB,IAAuBqD,EAAUD,IAAW,IAG5D5D,EAAegE,KACbhF,EAAcwB,GAAsBD,EAAWqD,EAAUC,GAAU,IAKnEA,EAAUC,EACZ9D,EAAegE,KACbhF,EAAcwB,EAAqBqD,EAAUC,GAAU,IAGzD9D,EAAegE,KACbhF,EAAcwB,EAAqBqD,EAAUtD,EAAWuD,GAAU,IAKtEzD,GAAa,EAGb4C,KAkMAgB,SA/LF,WACEhB,KA+LAiB,MArDF,WACe,UAAT9D,IAGJC,GAAa,EAGA,gBAFbD,EAAO,UAEiD,IAA1BJ,EAAekD,QAA0C,IAA1BlD,EAAekD,SAM1ElD,EAAiB,IACFgE,KAAKhF,EAAc,EAAI0B,KAAKC,GAAKT,GAAgB,EAAIQ,KAAKC,IAAK,IAC9EsC,IACI3C,GAOR,SAAS6D,IACHhE,EAASxB,GAEXwB,GAAU,IAAOxB,EAGjBE,GAAiB,WACfsF,QAGF7D,GAAgB,EAhBd6D,MATFnE,EAAiB,IACFgE,KAAKhF,EAAc,EAAI0B,KAAKC,GAAKT,GAAgB,EAAIQ,KAAKC,IAAK,IAC9EsC,OA4CFmB,SAvdF,SAAkBC,GAChBpE,EAAQoE,GAudRC,iBApdF,SAA0BhF,GACxBiB,EAAWjB,ICnCf,IAAMiF,EAAc,GAEdC,EAAoBC,YAAQ,CAChCC,GAAI,cACJC,QAAS,QACTlF,QAAS,CACPmF,KAAM,EACNC,WAAW,GAEbC,OAAQ,CACNC,MAAO,CACLC,GAAI,CACFC,OAAQ,CACNC,OAAQ,YACRC,QAASC,YAAO,CACdP,WAAW,KAGfQ,aAAc,CACZH,OAAQ,WACRC,QAASC,YAAO,CACdR,KAAM,EACNC,WAAW,OAKnBS,UAAW,CACTN,GAAI,CACFO,MAAO,CACLL,OAAQ,YACRC,QAASC,YAAO,CACdP,WAAW,OAKnBW,UAAW,CACTR,GAAI,CACFS,KAAM,CACJP,OAAQ,QACRC,QAASC,YAAO,CACdP,WAAW,OAKnBa,SAAU,CACRf,QAAS,SACTG,OAAQ,CACNa,OAAQ,CACNX,GAAI,CACFS,KAAM,CACJP,OAAQ,UAIdU,KAAM,CACJZ,GAAI,CAEFa,UAAW,CACTX,OAAQ,SACRC,QAASC,YAAO,CACdR,KAAM,SAACnF,EAASqG,GAAV,OAAqBrG,EAAQmF,KAAO,EAAInF,EAAQmF,KAAO,EAAI,SAM3EI,GAAI,CACFO,MAAO,CACLL,OAAQ,YACRC,QAASC,YAAO,CACdR,KAAM,UAsRHmB,MA9Qf,WAAgB,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACNhG,EADM,KACCmE,EADD,OAE6B4B,IAAMC,SAAS,IAF5C,mBAEN3G,EAFM,KAESgF,EAFT,OAGyB0B,IAAMC,SAAS,IAHxC,mBAGNC,EAHM,KAGOC,EAHP,OAI2BH,IAAMC,SAAS,IAJ1C,mBAING,EAJM,KAIQC,EAJR,OAKyBL,IAAMC,SAAS,IALxC,mBAKNK,EALM,KAKOC,EALP,OAOgBC,qBAAWhC,GAP3B,mBAONiC,EAPM,KAOQC,EAPR,KASPC,EAAYX,IAAMY,OAAO,MACzBC,EAAUb,IAAMY,OAAO,MAE7BZ,IAAMc,WAAU,WAGVD,EAAQE,QACVF,EAAQE,QAAQzC,iBAAiBhF,GAEjCuH,EAAQE,QAAU3H,EAAKuH,EAAUI,QAASzH,GALpB,kBAAMoH,EAAK,WACP,kBAAMA,EAAK,WAMvCG,EAAQE,QAAQzD,aACf,CAAChE,EAAeoH,IAEnBV,IAAMc,WAAU,WACVD,EAAQE,SACVF,EAAQE,QAAQ3C,SAASnE,KAE1B,CAACA,IAEJ,IAAM+G,EAAgB,SAAAC,GAAG,OAAIA,GAAO,GAAKA,EAAM3H,GAEzC4H,EAAqBF,EAAcd,IAAgBc,EAAcZ,IAAiBY,EAAcV,GAGhGa,GAAmBV,EAAaW,QAAQ,SAExCC,EAAW,WACXR,EAAQE,SAAWG,IACrBR,EAAK,UACLG,EAAQE,QAAQpD,SACduC,EACAE,EACAE,EACAhH,KAKAgI,EAAe,WACnB,GAAIT,EAAQE,SAAWG,EAAoB,CACzCR,EAAK,gBAELG,EAAQE,QAAQpD,SACduC,EACAE,EACAE,EACAhH,GALiB,KAWjBiI,EAAa,WACbV,EAAQE,UACVL,EAAK,aACLG,EAAQE,QAAQ9C,aAIduD,EAAU,WACVX,EAAQE,UACVL,EAAK,SACLG,EAAQE,QAAQ7C,UA+DpB,OACE,kBAAC,IAAD,CAAMuD,cAAc,SAASC,WAAW,UACtC,kBAAC,IAAD,CACEC,GAAG,KACHC,MAAM,UACN1G,SAAU,EACV2G,WAAW,aACXC,EAAG,GALL,qBASA,4BAAQC,IAAKpB,EAAW/G,MAAO,IAAKE,OAAQ,IAAKkI,MAAO,CAAEC,aAAc,UACxE,kBAAC,IAAD,CACEN,GAAG,OACHO,SAAU,SAAAC,GAAC,OAAIA,EAAEC,kBACjBX,cAAc,SACdC,WAAW,SACX9H,MAAK,UAAmB,EAAd2E,EAAL,OAEL,8BAAUyD,MAAO,CAAEK,OAAQ,SACzB,kBAAC,IAAD,CAAMV,GAAG,SAASE,WAAW,cAA7B,0BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACES,UAAQ,EACR5D,GAAG,eACH6D,KAAK,eACLC,aAAW,kCACXC,KAAK,SACLC,IAAK,EACLC,IAAKrJ,EAAgB,EACrBsJ,MAAO1C,EACP2C,QAAS,SAAAV,GAAC,OAAIA,EAAEjD,OAAO4D,UACvBC,SAAU,SAAAZ,GAEe,KAAnBA,EAAEjD,OAAO0D,MACXzC,OAAe6C,GAEf7C,EAAe8C,OAAOd,EAAEjD,OAAO0D,SAGnCM,SAAU/B,EACVgC,gBAAiB1C,EAAaW,QAAQ,SAAW,OAAS,OAC1DxH,MAAK,UAAK2E,EAAL,MACL6E,GAAI,IAEN,kBAAC,IAAD,CACEd,UAAQ,EACR5D,GAAG,gBACH6D,KAAK,gBACLC,aAAW,mCACXC,KAAK,SACLC,IAAK,EACLC,IAAKrJ,EAAgB,EACrBsJ,MAAOxC,EACPyC,QAAS,SAAAV,GAAC,OAAIA,EAAEjD,OAAO4D,UACvBC,SAAU,SAAAZ,GAEe,KAAnBA,EAAEjD,OAAO0D,MACXvC,OAAgB2C,GAEhB3C,EAAgB4C,OAAOd,EAAEjD,OAAO0D,SAGpCM,SAAU/B,EACVgC,gBAAiB1C,EAAaW,QAAQ,SAAW,OAAS,OAC1DxH,MAAK,UAAK2E,EAAL,MACL6E,GAAI,IAEN,kBAAC,IAAD,CACEd,UAAQ,EACR5D,GAAG,eACH6D,KAAK,eACLC,aAAW,kCACXC,KAAK,SACLC,IAAK,EACLC,IAAKrJ,EAAgB,EACrBsJ,MAAOtC,EACPuC,QAAS,SAAAV,GAAC,OAAIA,EAAEjD,OAAO4D,UACvBC,SAAU,SAAAZ,GAEe,KAAnBA,EAAEjD,OAAO0D,MACXrC,OAAeyC,GAEfzC,EAAe0C,OAAOd,EAAEjD,OAAO0D,SAGnCM,SAAU/B,EACVgC,gBAAiB1C,EAAaW,QAAQ,SAAW,OAAS,OAC1DxH,MAAK,UAAK2E,EAAL,MACL6E,GAAI,MApJG,WACjB,IAAIC,EACAC,EAkDJ,OAhDI7C,EAAaW,QAAQ,UACvBiC,EACE,oCACE,kBAAC,IAAD,CAAQE,QAAQ,UAAU3J,MAAM,MAAMiJ,QAASxB,GAA/C,UAGA,kBAAC,IAAD,CAAQkC,QAAQ,UAAU3J,MAAM,MAAMiJ,QAASvB,GAA/C,iBAKJgC,EAAU,iBAEV7C,EAAaW,QAAQ,cACrBX,EAAaW,QAAQ,cAErBiC,EACE,kBAAC,IAAD,CACEE,QAAS9C,EAAaW,QAAQ,aAAe,mBAAqB,YAClExH,MAAM,MACNiJ,QAASrB,EACT0B,SAAUzC,EAAaW,QAAQ,cAJjC,SASFkC,EAAU,UACD7C,EAAaW,QAAQ,cAC9BiC,EACE,oCACE,kBAAC,IAAD,CAAQE,QAAQ,YAAY3J,MAAM,MAAMiJ,QAASrB,GAAjD,SAGCf,EAAahH,QAAQmF,KAAO,GAC7B,kBAAC,IAAD,CACE2E,QAAS9C,EAAaW,QAAQ,mBAAqB,UAAY,UAC/DxH,MAAM,MACNiJ,QAAStB,EACT2B,SAAUzC,EAAaW,QAAQ,oBAJjC,cAWJkC,EAAU7C,EAAahH,QAAQmF,KAAO,EAAI,gBAAkB,UAI5D,kBAAC,IAAD,CAAMhF,MAAM,QAAQ4J,eAAgBF,GACjCD,GAkGAI,GACD,kBAAC,IAAD,CACE7J,MAAM,QACN4J,eAAe,gBACfE,GAAI,CACFC,QAAS,SAGX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAQ/B,WAAW,cAAlC,SACA,kBAAC,IAAD,CACEnD,GAAG,QACH6D,KAAK,QACLsB,aAAc,GACdjF,KAAM,EACN8D,IAAK,GACLC,IAAK,GACLI,SAAU,SAAAZ,GACR/D,EAAS6E,OAAOd,EAAEjD,OAAO0D,YAI/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,QAAQ,kBAAkB/B,WAAW,aAAaD,MAAOT,EAAkB,OAAS,QAA3F,cACA,kBAAC,IAAD,CACEzC,GAAG,kBACH6D,KAAK,kBACLsB,aAAc,GACdjF,KAAM,GACN8D,IAAK,GACLC,IAAK,IACLI,SAAU,SAAAZ,GAAC,OAAI7D,EAAiB2E,OAAOd,EAAEjD,OAAO0D,SAChDM,SAAU/B,OAKlB,kBAAC,IAAD,CAAMjG,SAAU,EAAG2G,WAAW,cAA9B,6BCtVciC,QACW,cAA7BhL,OAAOiL,SAASC,UAEe,UAA7BlL,OAAOiL,SAASC,UAEhBlL,OAAOiL,SAASC,SAASC,MACvB,2D,smBCVN,IAAMC,EAAK,KACNC,IADM,CAETd,QAAQ,EAAD,GACFc,IAAOd,QADL,CAELe,iBAAkB,CAACb,QAAS,kBAAmB3B,MAAO,YAAayC,GAAI,cAAeC,UAAW,mBAEnGC,OAAO,EAAD,GACDJ,IAAOI,OADN,CAEJC,UAAW,cAIfC,IAASC,OAAO,kBAAC,IAAD,CAAeR,MAAOA,GAAO,kBAAC,EAAD,OAAyBS,SAASC,eAAe,SD6GxF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.590e7392.chunk.js","sourcesContent":["const ORIGINAL_RADIUS = 100;\nconst MEDIUM_TURN_SPEED = 50;\n\nconst requestAnimFrame = window.requestAnimationFrame;\n\n// An object used to store the rotations.\n// totalAngle is the angle to turn\n// number is the number in the combination, i.e. 1, 2, or 3\nfunction ImageRotation(totalAngle, number) {\n  return {\n    totalAngle,\n    number,\n    angleTurned: 0\n  };\n}\n\nexport function lock(canvas, numbersOnDial, onResetComplete, onAnimationComplete) {\n  const context = canvas.getContext(\"2d\");\n  \n  const X_OFFSET = canvas.width / 2;\n  const Y_OFFSET = canvas.height * 0.67;\n  \n  context.translate(X_OFFSET, Y_OFFSET);\n  \n  let speed = MEDIUM_TURN_SPEED;\n  let currentAngle = 0;\n  let radius = ORIGINAL_RADIUS;\n  let mode = \"unlock\";\n  let shouldOpen = true;\n  let shackleIsOpen = false;\n  let imageRotations;\n  let numTicks = numbersOnDial;\n\n  // Return the angle, in radians, for turning the given amount of numbers on the current dial\n  function dialNumbersToRadians(dialNumbers) {\n    return (dialNumbers * 2 * Math.PI) / numTicks;\n  }\n\n  function setSpeed(newSpeed) {\n    speed = newSpeed;\n  }\n\n  function setNumbersOnDial(numbersOnDial) {\n    numTicks = numbersOnDial;\n  }\n\n  // Clear the canvas so a new image can be drawn\n  function clearCanvas() {\n    // clear the previous image\n    context.save();\n    // fix for correct offset\n    context.translate(-X_OFFSET, -Y_OFFSET);\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.restore();\n  }\n\n  function drawDial(radius) {\n    context.beginPath();\n\n    const startAngle = -Math.PI / 2;\n    const endAngle = 1.5 * Math.PI;\n    const counterClockwise = false;\n\n    context.lineWidth = radius * 0.02;\n    context.strokeStyle = \"black\";\n\n    // draw outer circle of dial\n    context.beginPath();\n    context.arc(0, 0, radius, startAngle, endAngle, counterClockwise);\n    context.fillStyle = \"black\";\n    context.fill();\n    context.stroke();\n\n    // draw tick marks\n    context.beginPath();\n    context.strokeStyle = \"white\";\n\n    for (\n      let angle = startAngle;\n      angle < endAngle;\n      angle += (2 * Math.PI) / numTicks\n    ) {\n      // go to starting point\n      let x = radius * Math.cos(angle);\n      let y = radius * Math.sin(angle);\n      context.moveTo(x, y);\n\n      // move to make line\n      x = radius * 0.9 * Math.cos(angle);\n      y = radius * 0.9 * Math.sin(angle);\n      context.lineTo(x, y);\n    }\n\n    context.stroke();\n\n    // draw longer tick marks for multiples of 5\n    context.beginPath();\n    context.lineWidth = radius * 0.03;\n\n    for (\n      let angle = startAngle;\n      angle < endAngle;\n      angle += ((2 * Math.PI) / numTicks) * 5\n    ) {\n      // go to starting point\n      let x = radius * Math.cos(angle);\n      let y = radius * Math.sin(angle);\n      context.moveTo(x, y);\n\n      // move to make line\n      x = radius * 0.8 * Math.cos(angle);\n      y = radius * 0.8 * Math.sin(angle);\n      context.lineTo(x, y);\n    }\n\n    context.stroke();\n\n    // draw numbers for multiples of 5\n    context.beginPath();\n\n    let fontSize;\n    if (numTicks > 40) {\n      fontSize = Math.round(radius * 0.2) / (numTicks / 40);\n    } else {\n      fontSize = Math.round(radius * 0.2);\n    }\n\n    context.fillStyle = \"white\";\n    context.font = \"\" + fontSize + \"pt Arial\";\n\n    for (let number = 0; number < numTicks; number += 5) {\n      context.save();\n      context.rotate(((2 * Math.PI) / numTicks) * number);\n      if (numTicks > 40) {\n        if (number < 10)\n          context.fillText(\n            \"\" + number,\n            -radius * fontSize * 0.0033,\n            -radius * (0.6 + (numTicks - 40) * 0.001)\n          );\n        else\n          context.fillText(\n            \"\" + number,\n            -radius * fontSize * 0.006,\n            -radius * (0.6 + (numTicks - 40) * 0.001)\n          );\n      } else {\n        if (number < 10)\n          context.fillText(\"\" + number, -radius * 0.07, -radius * 0.58);\n        else context.fillText(\"\" + number, -radius * 0.13, -radius * 0.58);\n      }\n\n      context.restore();\n    }\n\n    // draw knob\n    var knobOuterCircleRadius = radius * 0.5;\n    var knobInnerCircleRadius = radius * 0.43;\n\n    context.lineWidth = radius * 0.01;\n    context.beginPath();\n    context.strokeStyle = \"#303030\";\n    context.arc(\n      0,\n      0,\n      knobOuterCircleRadius,\n      startAngle,\n      endAngle,\n      counterClockwise\n    );\n\n    for (var angle = startAngle; angle < endAngle; angle += Math.PI / 40) {\n      // go to starting point\n      let x = knobOuterCircleRadius * Math.cos(angle);\n      let y = knobOuterCircleRadius * Math.sin(angle);\n      context.moveTo(x, y);\n\n      // move to make line\n      x = knobInnerCircleRadius * Math.cos(angle);\n      y = knobInnerCircleRadius * Math.sin(angle);\n      context.lineTo(x, y);\n    }\n\n    context.arc(\n      0,\n      0,\n      knobInnerCircleRadius,\n      startAngle,\n      endAngle,\n      counterClockwise\n    );\n    context.stroke();\n  }\n\n  // draw shackle\n  function drawShackle(dialRadius) {\n    const outsideX = dialRadius * 0.9; //dialRadius * Math.cos(-Math.PI / 4);\n    const bottomY = 0; //dialRadius * Math.sin(-Math.PI / 4) + dialRadius * 0.5;\n    const insideX = outsideX - dialRadius * 0.3;\n    const topY = bottomY - dialRadius * 2.5;\n    const bottomCurveY = topY + dialRadius; //bottom of where the shackle curves\n    const bottomLeftY = bottomCurveY + dialRadius;\n    const bottomNotchY = bottomLeftY - dialRadius * 0.2;\n    const notchX = -(outsideX - dialRadius * 0.2);\n\n    const counterClockwise = true;\n\n    context.beginPath();\n    context.lineWidth = dialRadius * 0.03;\n    context.strokeStyle = \"black\";\n\n    context.moveTo(outsideX, bottomY);\n    context.lineTo(outsideX, bottomCurveY);\n    context.arc(0, bottomCurveY, outsideX, 0, Math.PI, counterClockwise);\n    context.lineTo(-outsideX, bottomLeftY);\n    context.lineTo(-insideX, bottomLeftY);\n    context.lineTo(-insideX, bottomNotchY);\n    context.lineTo(notchX, bottomNotchY);\n    context.arc(\n      -insideX,\n      bottomNotchY,\n      dialRadius * 0.15,\n      Math.PI,\n      (3 * Math.PI) / 2,\n      !counterClockwise\n    );\n    context.lineTo(-insideX, bottomCurveY);\n    context.arc(0, bottomCurveY, insideX, Math.PI, 0, !counterClockwise);\n    context.lineTo(insideX, bottomY);\n    context.lineTo(outsideX, bottomY);\n    context.fillStyle = \"#c0c0c0\";\n    context.fill();\n\n    context.stroke();\n  }\n\n  // draw lock body\n  function drawLockBody(dialRadius) {\n    const startAngle = (-3 * Math.PI) / 4;\n    const endAngle = (5 * Math.PI) / 4;\n    const counterClockwise = false;\n\n    context.beginPath();\n    context.arc(\n      0,\n      -dialRadius * 0.1,\n      dialRadius * 1.2,\n      startAngle,\n      endAngle,\n      counterClockwise\n    );\n    context.lineWidth = dialRadius * 0.03;\n    context.strokeStyle = \"black\";\n    context.fillStyle = \"#c0c0c0\";\n    context.fill();\n    context.stroke();\n\n    // draw pointer thingy\n    context.beginPath();\n    context.lineWidth = dialRadius * 0.01;\n    context.strokeStyle = \"#e30000\";\n    context.moveTo(0, -dialRadius);\n    context.lineTo(-dialRadius * 0.1, -dialRadius * 1.15);\n    context.lineTo(dialRadius * 0.1, -dialRadius * 1.15);\n    context.lineTo(0, -dialRadius);\n    context.fillStyle = \"#e30000\";\n    context.fill();\n    context.stroke();\n  }\n\n  /* Given the 3 numbers in the combination, load the imageRots array with all the turns to open the lock correctly.\n   * Then initiate the animation.\n   */\n  function openLock(number1, number2, number3, numTicks, stepByStep) {\n    if (stepByStep) {\n      mode = 'stepByStep';\n    }\n\n    imageRotations = [];\n\n    imageRotations.push(ImageRotation(dialNumbersToRadians(numTicks), 1));\n    imageRotations.push(ImageRotation(dialNumbersToRadians(numTicks), 1));\n    imageRotations.push(\n      ImageRotation(dialNumbersToRadians(numTicks - number1), 1)\n    );\n\n    // add turns to imageRots array to reach second number\n    imageRotations.push(ImageRotation(dialNumbersToRadians(-numTicks), 2));\n    if (number2 > number1) {\n      imageRotations.push(\n        ImageRotation(dialNumbersToRadians(-(number2 - number1)), 2)\n      );\n    } else {\n      imageRotations.push(\n        ImageRotation(dialNumbersToRadians(-numTicks + number1 - number2), 2)\n      );\n    }\n\n    // add turn to imageRotations array to reach third number\n    if (number2 > number3) {\n      imageRotations.push(\n        ImageRotation(dialNumbersToRadians(number2 - number3), 3)\n      );\n    } else {\n      imageRotations.push(\n        ImageRotation(dialNumbersToRadians(number2 + numTicks - number3), 3)\n      );\n    }\n\n    // have the shackle open when the combination is completed\n    shouldOpen = true;\n\n    // initiate spinning animation\n    rotateImage();\n  }\n\n  function nextStep() {\n    rotateImage();\n  }\n\n  // Animate the dial rotating\n  function rotateImage() {\n    // No rotations to process, so exit immediately\n    if (imageRotations.length === 0) {\n      return;\n    }\n      \n    // only repeat if the angle turned is less than the total angle to be turned\n    var angleLeftToTurn =\n      Math.abs(imageRotations[0].totalAngle) - imageRotations[0].angleTurned;\n\n    var percentOfAngleTurned =\n      imageRotations[0].angleTurned / Math.abs(imageRotations[0].totalAngle);\n    var x = percentOfAngleTurned * Math.PI;\n    var angleToTurnNow =\n      ((speed / MEDIUM_TURN_SPEED) *\n        (Math.sin(x + Math.PI / 12) + 0.5) *\n        imageRotations[0].totalAngle) /\n      90;\n\n    if (angleLeftToTurn > 0) {\n      // if still turning\n      // must turn the standard amount or the remaining amount if less than the standard amount\n      // must update the current angle for the rotated dial as well as the angleTurned for this rot object\n      if (angleLeftToTurn < Math.abs(imageRotations[0].totalAngle) / 180) {\n        if (imageRotations[0].totalAngle > 0) {\n          currentAngle += angleLeftToTurn;\n          imageRotations[0].angleTurned += angleLeftToTurn;\n        } else {\n          currentAngle -= angleLeftToTurn;\n          imageRotations[0].angleTurned += angleLeftToTurn;\n        }\n      } else {\n        // update the current angle for the rotated dial as well as the angleTurned for this rot object\n        currentAngle += angleToTurnNow;\n        imageRotations[0].angleTurned += Math.abs(angleToTurnNow);\n      }\n\n      clearCanvas();\n      drawLock();\n\n      // request new frame\n      requestAnimFrame(function() {\n        rotateImage();\n      });\n    } else {\n      // if finished a turn but there are still additional turns to make\n      if (imageRotations.length > 1) {\n        // if in unlock mode, keep going\n        if (mode === \"unlock\") {\n          // remove the first rotation element in the array\n          imageRotations.shift();\n\n          // go on to the next turn after brief pause\n          setTimeout(function() {\n            requestAnimFrame(function() {\n              rotateImage();\n            });\n          }, (1000 * MEDIUM_TURN_SPEED) / speed);\n        } else if (imageRotations[0].number === imageRotations[1].number) {\n          // in stepByStep, but same step number, so keep going\n          // remove the first rotation element in the array\n          imageRotations.shift();\n\n          // go on to the next turn after brief pause\n          setTimeout(function() {\n            requestAnimFrame(function() {\n              rotateImage();\n            });\n          }, (1000 * MEDIUM_TURN_SPEED) / speed);\n        } else {\n          // in stepByStep, but not the same step number, so remove rot element and wait for next click\n          // remove the first rotation element in the array\n          imageRotations.shift();\n          onAnimationComplete();\n        }\n      } else if (mode === 'reset') {\n        // finished with turns\n        onResetComplete();\n        mode = 'unlock';\n      } else {\n        // done opening lock\n        imageRotations = [];\n        if (shouldOpen && !shackleIsOpen) {\n          // open shackle if completed combination\n          openShackle(0);\n          shackleIsOpen = true;\n        }\n      }\n    }\n  }\n\n  // Open the shackle when combination is completed\n  function openShackle(distanceOpened) {\n    // zoom out so shackle doesn't open out of view\n    if (radius > ORIGINAL_RADIUS * 0.75 && shouldOpen) {\n      clearCanvas();\n\n      //update the radius\n      radius -= 0.01 * ORIGINAL_RADIUS;\n\n      drawLock();\n\n      // request new frame\n      requestAnimFrame(function() {\n        openShackle(distanceOpened);\n      });\n    } else if (distanceOpened < radius * 0.8 && shouldOpen) {\n      clearCanvas();\n\n      // draw the new image\n      context.save();\n      context.translate(0, -distanceOpened);\n      drawShackle(radius);\n      context.restore();\n\n      distanceOpened += radius * 0.03;\n\n      drawLockBody(radius);\n\n      // draw the dial at the correct orientation\n      context.save();\n      context.rotate(currentAngle);\n      drawDial(radius);\n      context.restore();\n\n      // request new frame\n      requestAnimFrame(function() {\n        openShackle(distanceOpened);\n      });\n    } else {\n      onAnimationComplete();\n    }\n  }\n\n  function reset() {\n    if (mode === 'reset') {\n      return;\n    }\n    shouldOpen = false;\n    mode = 'reset';\n\n    if (mode === \"stepByStep\" && (imageRotations.length === 1 || imageRotations.length === 3)) {\n      imageRotations = [];\n      imageRotations.push(ImageRotation(2 * Math.PI - currentAngle % (2 * Math.PI), 0));\n      rotateImage();\n    }\n    else {\n      imageRotations = [];\n      imageRotations.push(ImageRotation(2 * Math.PI - currentAngle % (2 * Math.PI), 0));\n      rotateImage();\n      if (shackleIsOpen) {\n        returnToOriginalSize();\n      }\n    }\n  }\n\n  // Zoom in to show the lock in the original size after a reset.\n  function returnToOriginalSize() {\n    if (radius < ORIGINAL_RADIUS) {\n      // update the radius\n      radius += 0.01 * ORIGINAL_RADIUS;\n\n      // request new frame\n      requestAnimFrame(function() {\n        returnToOriginalSize();\n      });\n    } else {\n      shackleIsOpen = false;\n    }\n  }\n\n  function drawLock() {\n    drawShackle(radius);\n    drawLockBody(radius);\n\n    context.save();\n    context.rotate(currentAngle);\n\n    drawDial(radius);\n\n    context.restore();\n  }\n\n  return {\n    drawLock,\n    openLock,\n    nextStep,\n    reset,\n    setSpeed,\n    setNumbersOnDial\n  };\n}\n","import React from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport { Machine, assign } from \"xstate\";\nimport { Input, Slider, Label } from \"@rebass/forms\";\nimport { Box, Flex, Heading, Button, Text } from \"rebass\";\n\nimport { lock } from \"./lock\";\n\nconst INPUT_WIDTH = 70;\n\nconst lockHelperMachine = Machine({\n  id: \"lock-helper\",\n  initial: \"start\",\n  context: {\n    step: 0,\n    animating: false\n  },\n  states: {\n    start: {\n      on: {\n        UNLOCK: {\n          target: \"unlocking\",\n          actions: assign({\n            animating: true\n          })\n        },\n        STEP_BY_STEP: {\n          target: \"stepping\",\n          actions: assign({\n            step: 1,\n            animating: true\n          })\n        }\n      }\n    },\n    unlocking: {\n      on: {\n        RESET: {\n          target: \"resetting\",\n          actions: assign({\n            animating: true\n          })\n        }\n      }\n    },\n    resetting: {\n      on: {\n        DONE: {\n          target: \"start\",\n          actions: assign({\n            animating: false\n          })\n        }\n      }\n    },\n    stepping: {\n      initial: \"active\",\n      states: {\n        active: {\n          on: {\n            DONE: {\n              target: \"idle\"\n            }\n          }\n        },\n        idle: {\n          on: {\n            // Needs a guard to prevent from happening after 3 steps are done?\n            NEXT_STEP: {\n              target: \"active\",\n              actions: assign({\n                step: (context, event) => (context.step < 3 ? context.step + 1 : 3),\n              })\n            }\n          }\n        }\n      },\n      on: {\n        RESET: {\n          target: \"resetting\",\n          actions: assign({\n            step: 0,\n          })\n        }\n      }\n    }\n  }\n});\n\nfunction App() {\n  const [speed, setSpeed] = React.useState(50);\n  const [numbersOnDial, setNumbersOnDial] = React.useState(40);\n  const [firstNumber, setFirstNumber] = React.useState(10);\n  const [secondNumber, setSecondNumber] = React.useState(25);\n  const [thirdNumber, setThirdNumber] = React.useState(20);\n\n  const [currentState, send] = useMachine(lockHelperMachine);\n\n  const canvasRef = React.useRef(null);\n  const lockRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const onResetComplete = () => send(\"DONE\");\n    const onAnimationComplete = () => send(\"DONE\");\n    if (lockRef.current) {\n      lockRef.current.setNumbersOnDial(numbersOnDial);\n    } else {\n      lockRef.current = lock(canvasRef.current, numbersOnDial, onResetComplete, onAnimationComplete);\n    }\n    lockRef.current.drawLock();\n  }, [numbersOnDial, send]);\n\n  React.useEffect(() => {\n    if (lockRef.current) {\n      lockRef.current.setSpeed(speed);\n    }\n  }, [speed]);\n\n  const numberIsValid = num => num >= 0 && num < numbersOnDial;\n\n  const combinationIsValid = numberIsValid(firstNumber) && numberIsValid(secondNumber) && numberIsValid(thirdNumber);\n\n  // Certain controls must be disabled while the unlocking or step by step processes are in progress\n  const disableControls = !currentState.matches('start');\n\n  const onUnlock = () => {\n    if (lockRef.current && combinationIsValid) {\n      send(\"UNLOCK\");\n      lockRef.current.openLock(\n        firstNumber,\n        secondNumber,\n        thirdNumber,\n        numbersOnDial\n      );\n    }\n  };\n\n  const onStepByStep = () => {\n    if (lockRef.current && combinationIsValid) {\n      send(\"STEP_BY_STEP\");\n      const stepByStep = true;\n      lockRef.current.openLock(\n        firstNumber,\n        secondNumber,\n        thirdNumber,\n        numbersOnDial,\n        stepByStep \n      );\n    }\n  };\n\n  const onNextStep = () => {\n    if (lockRef.current) {\n      send(\"NEXT_STEP\");\n      lockRef.current.nextStep();\n    }\n  }\n\n  const onReset = () => {\n    if (lockRef.current) {\n      send(\"RESET\");\n      lockRef.current.reset();\n    }\n  };\n\n  const getButtons = () => {\n    let buttons;\n    let justify;\n\n    if (currentState.matches(\"start\")) {\n      buttons = (\n        <>\n          <Button variant=\"primary\" width=\"2/5\" onClick={onUnlock}>\n            Unlock\n          </Button>\n          <Button variant=\"primary\" width=\"2/5\" onClick={onStepByStep}>\n            Step By Step\n          </Button>\n        </>\n      );\n      justify = \"space-between\";\n    } else if (\n      currentState.matches(\"unlocking\") ||\n      currentState.matches(\"resetting\")\n    ) {\n      buttons = (\n        <Button\n          variant={currentState.matches(\"resetting\") ? \"secondaryOutline\" : \"secondary\"}\n          width=\"2/5\"\n          onClick={onReset}\n          disabled={currentState.matches(\"resetting\")}\n        >\n          Reset\n        </Button>\n      );\n      justify = \"center\";\n    } else if (currentState.matches(\"stepping\")) {\n      buttons = (\n        <>\n          <Button variant=\"secondary\" width=\"2/5\" onClick={onReset}>\n            Reset\n          </Button>\n          {currentState.context.step < 3 && \n          <Button\n            variant={currentState.matches(\"stepping.active\") ? \"outline\" : \"primary\"}\n            width=\"2/5\"\n            onClick={onNextStep}\n            disabled={currentState.matches(\"stepping.active\")}\n          >\n            Next Step\n          </Button>\n          }\n        </>\n      );\n      justify = currentState.context.step < 3 ? \"space-between\" : 'center';\n    }\n\n    return (\n      <Flex width=\"230px\" justifyContent={justify}>\n        {buttons}\n      </Flex>\n    );\n  };\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"center\">\n      <Heading\n        as=\"h1\"\n        color=\"primary\"\n        fontSize={5}\n        fontFamily=\"sans-serif\"\n        p={3}\n      >\n        Combo Lock Helper\n      </Heading>\n      <canvas ref={canvasRef} width={280} height={360} style={{ marginBottom: '10px' }} />\n      <Flex\n        as=\"form\"\n        onSubmit={e => e.preventDefault()}\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        width={`${INPUT_WIDTH * 3}px`}\n      >\n        <fieldset style={{ border: \"none\" }}>\n          <Text as=\"legend\" fontFamily=\"sans-serif\">Enter the combination:</Text>\n          <Flex>\n            <Input\n              required\n              id=\"first-number\"\n              name=\"first-number\"\n              aria-label=\"First Number in the Combination\"\n              type=\"number\"\n              min={0}\n              max={numbersOnDial - 1}\n              value={firstNumber}\n              onClick={e => e.target.select()}\n              onChange={e => {\n                // This is necessary to prevent automatically showing a 0 when the current value is deleted\n                if (e.target.value === \"\") {\n                  setFirstNumber(undefined);\n                } else {\n                  setFirstNumber(Number(e.target.value));\n                }\n              }}\n              disabled={disableControls}\n              backgroundColor={currentState.matches('start') ? \"#FFF\" : \"#EEE\"}\n              width={`${INPUT_WIDTH}px`}\n              mx={1}\n            />\n            <Input\n              required\n              id=\"second-number\"\n              name=\"second-number\"\n              aria-label=\"Second Number in the Combination\"\n              type=\"number\"\n              min={0}\n              max={numbersOnDial - 1}\n              value={secondNumber}\n              onClick={e => e.target.select()}\n              onChange={e => {\n                // This is necessary to prevent automatically showing a 0 when the current value is deleted\n                if (e.target.value === \"\") {\n                  setSecondNumber(undefined);\n                } else {\n                  setSecondNumber(Number(e.target.value));\n                }\n              }}\n              disabled={disableControls}\n              backgroundColor={currentState.matches('start') ? \"#FFF\" : \"#EEE\"}\n              width={`${INPUT_WIDTH}px`}\n              mx={1}\n            />\n            <Input\n              required\n              id=\"third-number\"\n              name=\"third-number\"\n              aria-label=\"Third Number in the Combination\"\n              type=\"number\"\n              min={0}\n              max={numbersOnDial - 1}\n              value={thirdNumber}\n              onClick={e => e.target.select()}\n              onChange={e => {\n                // This is necessary to prevent automatically showing a 0 when the current value is deleted\n                if (e.target.value === \"\") {\n                  setThirdNumber(undefined);\n                } else {\n                  setThirdNumber(Number(e.target.value));\n                }\n              }}\n              disabled={disableControls}\n              backgroundColor={currentState.matches('start') ? \"#FFF\" : \"#EEE\"}\n              width={`${INPUT_WIDTH}px`}\n              mx={1}\n            />\n          </Flex>\n        </fieldset>\n        {getButtons()}\n        <Flex\n          width=\"330px\"\n          justifyContent=\"space-between\"\n          sx={{\n            padding: \"20px\"\n          }}\n        >\n          <Box>\n            <Label htmlFor=\"speed\" fontFamily=\"sans-serif\">Speed</Label>\n            <Slider\n              id=\"speed\"\n              name=\"speed\"\n              defaultValue={50}\n              step={5}\n              min={10}\n              max={90}\n              onChange={e => { \n                setSpeed(Number(e.target.value))\n              }}\n            />\n          </Box>\n          <Box>\n            <Label htmlFor=\"numbers-on-dial\" fontFamily=\"sans-serif\" color={disableControls ? '#888' : '#000'}>#s on Dial</Label>\n            <Slider\n              id=\"numbers-on-dial\"\n              name=\"numbers-on-dial\"\n              defaultValue={40}\n              step={10}\n              min={30}\n              max={100}\n              onChange={e => setNumbersOnDial(Number(e.target.value))}\n              disabled={disableControls}\n            />\n          </Box>\n        </Flex>\n      </Flex>\n      <Text fontSize={1} fontFamily=\"sans-serif\">© 2019 Nik Baltatzis</Text>\n    </Flex>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {ThemeProvider} from 'emotion-theming';\nimport preset from '@rebass/preset';\n\nconst theme = {\n  ...preset,\n  buttons: {\n    ...preset.buttons,\n    secondaryOutline: {variant: \"buttons.primary\", color: \"secondary\", bg: \"transparent\", boxShadow: \"inset 0 0 2px\"}\n  },\n  colors: {\n    ...preset.colors,\n    secondary: '#a3005f',\n  }\n};\n\nReactDOM.render(<ThemeProvider theme={theme}><App /></ThemeProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}